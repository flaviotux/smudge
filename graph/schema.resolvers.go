package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"

	"github.com/scylladb/gocqlx/v2/qb"
	"gitlab.luizalabs.com/luizalabs/smudge/graph/model"
	internal "gitlab.luizalabs.com/luizalabs/smudge/internal/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.TodoRequest) (*internal.Todo, error) {
	user := internal.User{ID: input.UserID}

	return internal.NewTodoModel(r.session).
		SetText(input.Text).
		SetDone(false).
		AddUser(&user).
		InsertQueryContext(ctx)
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*internal.Todo, error) {
	return internal.NewTodoModel(r.session).SelectQueryContext(ctx, qb.M{})
}

// User is the resolver for the user field.
func (r *todoResolver) User(ctx context.Context, obj *internal.Todo) (*internal.User, error) {
	user := internal.NewUserModel(r.session)
	user.ID = obj.UserID
	return user.GetQueryContext(ctx)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Todo returns TodoResolver implementation.
func (r *Resolver) Todo() TodoResolver { return &todoResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type todoResolver struct{ *Resolver }
