package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"time"

	"github.com/gocql/gocql"
	"github.com/scylladb/gocqlx/v2/qb"
	"gitlab.luizalabs.com/luizalabs/smudge/db"
	"gitlab.luizalabs.com/luizalabs/smudge/graph/model"
	internal "gitlab.luizalabs.com/luizalabs/smudge/internal/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.TodoRequest) (*internal.Todo, error) {
	t := internal.Todo{
		ID:     gocql.UUIDFromTime(time.Now()).String(),
		Text:   input.Text,
		UserID: input.UserID,
		Done:   true,
	}

	q := db.TodoTable.InsertQueryContext(ctx, *r.DB).BindStruct(t)
	if err := q.ExecRelease(); err != nil {
		return nil, err
	}

	return &t, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*internal.Todo, error) {
	var todo []*internal.Todo

	q := db.TodoTable.SelectQueryContext(ctx, *r.DB).BindMap(qb.M{})
	if err := q.SelectRelease(&todo); err != nil {
		return nil, err
	}

	return todo, nil
}

// User is the resolver for the user field.
func (r *todoResolver) User(ctx context.Context, obj *internal.Todo) (*internal.User, error) {
	u := internal.User{ID: obj.UserID}

	q := db.UserTable.GetQueryContext(ctx, *r.DB).BindStruct(u)
	if err := q.Get(&u); err != nil {
		return nil, err
	}

	return &u, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Todo returns TodoResolver implementation.
func (r *Resolver) Todo() TodoResolver { return &todoResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type todoResolver struct{ *Resolver }
